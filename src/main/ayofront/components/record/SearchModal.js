import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Modal,
  TextInput,
  FlatList,
} from "react-native";
import { useNavigation } from "@react-navigation/native";
import { BlurView } from "expo-blur";
import { AntDesign } from "@expo/vector-icons";
import { FontAwesome5 } from "@expo/vector-icons";
//axios
import axios from "axios";
import Constants from "expo-constants";

const SearchModal = ({ modalVisible, closeModal }) => {
  const navigation = useNavigation();

  //Server ÌÜµÏã†ÏùÑ ÏúÑÌïú URI ÏàòÏ†ï
  const uri = "http://213.35.96.167/";

  //DebounceÎ•º Ï†ÅÏö©Ìïú SearchAPI Ìò∏Ï∂ú
  const [keyword, setKeyword] = useState(""); //Í≤ÄÏÉâ ÌÇ§ÏõåÎìú
  const [list, setList] = useState([]); //Í≤ÄÏÉâÏñ¥Í∞Ä Ìè¨Ìï®Îêú Îç∞Ïù¥ÌÑ∞ Î¶¨Ïä§Ìä∏

  useEffect(() => {
    if (keyword === "") {
      return; // Ï¥àÍ∏∞Í∞íÏùº ÎïåÎäî ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥ÏßÄ ÏïäÏùå
    }

    const getList = () => {
      const query = keyword.trim();
      axios
        .get(`${uri}/api/food/search/${query}`)
        .then((response) => {
          setList(response.data);
        })
        .catch(() => {});
    };

    const debounce = setTimeout(() => {
      getList();
    }, 200); //keywordÍ∞Ä ÏûÖÎ†•ÎêòÍ≥† 0.xÏ¥à ÌõÑ Ïã§ÌñâÎêòÍ≤å ÏßÄÏó∞ÏãúÌÇ¥

    return () => {
      clearTimeout(debounce);
    };
  }, [keyword]);

  //ÏµúÏ¢Ö Í≤ÄÏÉâÏñ¥ Ï†úÏ∂ú, Validation : keywordÏôÄ listÏùò Í∞íÏù¥ ÏùºÏπòÌïòÏßÄ ÏïäÏúºÎ©¥ Ï†úÏ∂úÎ™ªÌïòÍ≤å ÎßâÍ≥† error ÌëúÏãú
  const [error, setError] = useState("");
  const submitSearchResult = () => {
    const foundItem = list.find(
      (item) => item.nFoodName.trim() === keyword.trim()
    );
    if (!foundItem || "") {
      setError("Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏùåÏãùÏùÑ Í≥†Î•∏ ÌõÑ Ï†úÏ∂úÌï¥Ï£ºÏÑ∏Ïöîü•π");
      return;
    }
    navigation.push("RecordMain", { foodInfo: list });
    closeModal();
  };

  //Í≤ÄÏÉâÏñ¥ ÌïòÏù¥ÎùºÏù¥Ìä∏ ÏÉâÏÉÅ Ï†ÅÏö©
  const highlightKeyword = (text, keyword) => {
    const parts = text.split(new RegExp(`(${keyword})`, "gi")); //JSÏùò RegExpÏùÄ Ï†ïÍ∑úÌëúÌòÑÏãù ÏÇ¨Ïö© 'gi'Îäî ÏòµÏÖò
    return (
      <Text style={{ fontSize: 18 }}>
        {parts.map((part, i) =>
          part.toLowerCase() === keyword.toLowerCase() ? (
            <Text key={i} style={{ color: "red", fontWeight: "bold" }}>
              {part}
            </Text>
          ) : (
            part
          )
        )}
      </Text>
    );
  };

  return (
    <Modal animationType="slide" visible={modalVisible} transparent={true}>
      <BlurView style={{ flex: 1 }}>
        <View style={styles.modalScreen}>
          <TouchableOpacity onPress={closeModal}>
            <AntDesign name="close" style={styles.modalCloseButton} />
          </TouchableOpacity>
          <View style={styles.modalSearchContainer}>
            <TouchableOpacity onPress={submitSearchResult}>
              <FontAwesome5 name="search" style={styles.modalSearchButton} />
            </TouchableOpacity>
            <View style={styles.modalTextInputBox}>
              <TextInput
                style={styles.modalTextInput}
                placeholder="Search your meal"
                returnKeyType="search"
                autoFocus={true}
                onChangeText={setKeyword}
                value={keyword}
                onSubmitEditing={submitSearchResult}
                onFocus={() => setError("")}
              />
              <Text style={{ color: "red", fontWeight: "bold" }}>{error}</Text>
            </View>
            <TouchableOpacity onPress={() => setKeyword("")}>
              <AntDesign name="closecircleo" style={styles.clearButton} />
            </TouchableOpacity>
          </View>
          <FlatList
            data={list}
            showsVerticalScrollIndicator={false}
            style={styles.searchScrollView}
            keyExtractor={(item, index) => item.nNo || String(index)}
            //FlatList Rendering
            renderItem={({ item }) => (
              <TouchableOpacity
                style={{ marginVertical: "3%", fontSize: 18 }}
                onPress={() => {
                  setKeyword(item.nFoodName);
                }}
              >
                {highlightKeyword(item.nFoodName, keyword)}
              </TouchableOpacity>
            )}
          />
        </View>
      </BlurView>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalScreen: {
    flex: 1,
    marginTop: "11%",
    backgroundColor: "rgba(255,255,255,0.6)",
    borderRadius: 30,
    padding: 15,
  },
  modalCloseButton: {
    margin: 10,
    left: "90%",
    fontSize: 25,
    color: "rgba(0, 0, 0, 0.1)",
  },
  modalSearchContainer: {
    alignItems: "center",
    width: "100%",
    position: "relative",
  },
  modalTextInputBox: {
    width: "80%",
    height: 45,
    borderColor: "rgba(0, 0, 0, 0.3)",
    borderWidth: 1,
    borderRadius: 10,
    paddingLeft: 50,
  },
  modalTextInput: {
    width: "80%",
    height: 45,
    fontSize: 16,
  },
  modalSearchButton: {
    fontSize: 20,
    color: "orange",
    position: "absolute",
    right: "30%",
    top: 13,
    zIndex: 1,
  },
  clearButton: {
    fontSize: 20,
    color: "rgba(0, 0, 0, 0.2)",
    position: "absolute",
    left: "32%",
    bottom: 12,
  },
  //FlatList
  searchScrollView: {
    height: "80%",
    marginTop: "5%",
    marginLeft: "10%",
  },
});

export default SearchModal;
